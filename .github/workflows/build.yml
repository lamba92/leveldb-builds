name: Build LevelDB

on:
  workflow_dispatch:
    inputs:
      leveldb-version:
        description: "LevelDB version"
        required: true
      windows-enable:
        description: "Enable Windows build"
        required: false
        default: true
      debug:
        description: "Debug mode"
        required: false
        default: false

permissions:
  contents: write

jobs:
  windows:
    if: ${{ github.event.inputs.windows-enable == 'true' }}
    name: Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: 'google/leveldb'
          ref: ${{ github.event.inputs.leveldb-version }}
          submodules: true
      - name: Install dependencies with Chocolatey
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"'
          choco install visualstudio2022buildtools --package-parameters "--allWorkloads"



      # Windows x64 shared
      - name: Configure shared for Windows x64
        run: |
          mkdir build-shared-x64 && cd build-shared-x64
          cmake -G "Visual Studio 17 2022" -A x64 `
            -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF `
            -DBUILD_SHARED_LIBS=ON ..
      - name: Build shared for Windows x64
        run: cmake --build build-shared-x64 --config Release -j8
      - run: tree
        if: ${{ github.event.inputs.debug == 'true' }}
      - run: Compress-Archive -Path "build-shared-x64/Release/*" -DestinationPath "libleveldb-${{ github.event.inputs.leveldb-version }}-windows-shared-x64.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-windows-shared-x64.zip
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-windows-shared-x64.zip

      # Windows x64 static
      - name: Configure static for Windows x64
        run: |
          mkdir build-static-x64 && cd build-static-x64
          cmake -G "Visual Studio 17 2022" -A x64 `
            -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF `
            -DBUILD_SHARED_LIBS=OFF ..
      - name: Build static for Windows x64
        run: cmake --build build-static-x64 --config Release -j8
      - run: tree
        if: ${{ github.event.inputs.debug == 'true' }}
      - run: Compress-Archive -Path "build-static-x64/Release/*" -DestinationPath "libleveldb-${{ github.event.inputs.leveldb-version }}-windows-static-x64.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-windows-x64.zip
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-windows-x64.zip

      # Windows ARM64 shared
      - name: Configure shared for Windows ARM64
        run: |
          mkdir build-shared-arm64 && cd build-shared-arm64
          cmake -G "Visual Studio 17 2022" -A ARM64 `
            -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF `
            -DBUILD_SHARED_LIBS=ON ..
      - name: Build LevelDB for Windows ARM64
        run: cmake --build build-shared-arm64 --config Release -j8
      - run: Compress-Archive -Path "build-shared-arm64/Release/*" -DestinationPath "libleveldb-${{ github.event.inputs.leveldb-version }}-windows-shared-arm64.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-windows-shared-arm64.zip
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-windows-shared-arm64.zip


      # Windows ARM64 static
      - name: Configure static for Windows ARM64
        run: |
          mkdir build-static-arm64 && cd build-static-arm64
          cmake -G "Visual Studio 17 2022" -A ARM64 `
            -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF `
            -DBUILD_SHARED_LIBS=OFF ..
      - name: Build LevelDB for Windows ARM64
        run: cmake --build build-static-arm64 --config Release -j8
      - run: Compress-Archive -Path "build-shared-arm64/Release/*" -DestinationPath "libleveldb-${{ github.event.inputs.leveldb-version }}-windows-static-arm64.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-windows-static-arm64.zip
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-windows-static-arm64.zip

  linux:
    name: Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: 'google/leveldb'
          ref: ${{ github.event.inputs.leveldb-version }}
          submodules: true

      # Linux x64 shared
      - name: Build shared x64
        # using $(which cmake) otherwise it will error. ¯\_(ツ)_/¯
        run: |
          mkdir build-shared-x64 && cd build-shared-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF .. && \
          $(which cmake) --build . -j8
      - run: cp -L build-shared-x64/libleveldb.so libleveldb-${{ github.event.inputs.leveldb-version }}-linux-shared-x64.so
      - uses: actions/upload-artifact@v4
        with:
         name: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-shared-x64.so
         path: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-shared-x64.so

      # Linux x64 static
      - name: Build static x64
        run: |
          mkdir build-static-x64 && cd build-static-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF .. && \
          $(which cmake) --build . -j8
      - run: cp -L build-static-x64/libleveldb.a libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-x64.a
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-x64.a
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-x64.a

      # Linux ARM64 shared
      - name: Install arm64 cross-compilation tools
        run: sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Build shared arm64
        run: |
          mkdir build-static-arm64 && cd build-static-arm64 && \
          cmake -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
          -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-static-arm64/libleveldb.so libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-arm64.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-arm64.so
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-arm64.so

      # Linux ARM64 static
      - name: Build static arm64
        run: |
          mkdir build-shared-arm64 && cd build-shared-arm64 && \
          cmake -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
          -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=OFF .. && \
          cmake --build . -j8
      - run: cp -L build-shared-arm64/libleveldb.a libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-arm64.a
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-arm64.a
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-arm64.a

      # Linux ARMv7-a shared
      - name: Install armv7-a cross-compilation tools
        run: sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
      - name: Create toolchain file
        run: |
          cat <<EOF > armv7-a.cmake
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_VERSION 1)
          # Specify the cross compiler
          set(CMAKE_C_COMPILER arm-linux-gnueabihf-gcc)
          set(CMAKE_CXX_COMPILER arm-linux-gnueabihf-g++)
          set(CMAKE_LINKER arm-linux-gnueabihf-ld)
          set(CMAKE_STRIP arm-linux-gnueabihf-strip)
          # Where is the target environment
          set(CMAKE_FIND_ROOT_PATH /usr/arm-linux-gnueabihf)
          # Search for programs in the build host directories
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          # For libraries and headers in the target directories
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
      - name: Build shared armv7-a
        run: |
          mkdir build-shared-armv7-a && cd build-shared-armv7-a && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../armv7-a.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_CXX_STANDARD=11 \
          -DCMAKE_CXX_FLAGS="-std=c++11 -Wno-psabi" \
          -DCMAKE_C_FLAGS="-Wno-psabi" .. && \
          cmake --build . -j8
      - run: cp -L build-shared-armv7-a/libleveldb.so libleveldb-${{ github.event.inputs.leveldb-version }}-linux-shared-armv7-a.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-shared-armv7-a.so
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-shared-armv7-a.so

      # Linux ARMv7-a static
      - name: Build static armv7-a
        run: |
          mkdir build-static-armv7-a && cd build-static-armv7-a && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../armv7-a.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=OFF \
          -DCMAKE_CXX_STANDARD=11 \
          -DCMAKE_CXX_FLAGS="-std=c++11 -Wno-psabi" \
          -DCMAKE_C_FLAGS="-Wno-psabi" .. && \
          cmake --build . -j8
      - run: cp -L build-static-armv7-a/libleveldb.a libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-armv7-a.a
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-armv7-a.a
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-linux-static-armv7-a.a

      # Android ARM64 shared
      - name: Create Android toolchain file
        run: |
          cat <<EOF > android.cmake
          set(CMAKE_SYSTEM_NAME Android)
          set(CMAKE_ANDROID_NDK $($ANDROID_NDK))
          set(CMAKE_SYSTEM_VERSION 35)
          set(CMAKE_ANDROID_STL_TYPE c++_shared)
          EOF

      - name: Build Android ARM64 shared
        run: |
          mkdir build-shared-android-arm64 && cd build-shared-android-arm64 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-shared-android-arm64/libleveldb.so libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-arm64.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-arm64.so
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-arm64.so


      # Android ARM64 static
      - name: Build Android ARM64 static
        run: |
          mkdir build-static-android-arm64 && cd build-static-android-arm64 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \
          -DBUILD_SHARED_LIBS=OFF .. && \
          cmake --build . -j8
      - run: cp -L build-static-android-arm64/libleveldb.a libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-arm64.a
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-arm64.a
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-arm64.a

      # Android ARMv7 shared
      - name: Build Android ARMv7 shared
        run: |
          mkdir build-shared-android-armv7 && cd build-shared-android-armv7 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-shared-android-armv7/libleveldb.so libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-armv7.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-armv7.so
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-armv7.so


      # Android ARMv7 static
      - name: Build Android ARMv7 static
        run: |
          mkdir build-static-android-armv7 && cd build-static-android-armv7 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a \
          -DBUILD_SHARED_LIBS=OFF .. && \
          cmake --build . -j8
      - run: cp -L build-static-android-armv7/libleveldb.a libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-armv7.a
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-armv7.a
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-armv7.a

      # Android x86 shared
      - name: Build Android x86 shared
        run: |
          mkdir build-shared-android-x86 && cd build-shared-android-x86 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=x86 \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-shared-android-x86/libleveldb.so libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-x86.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-x86.so
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-x86.so

      # Android x86 static
      - name: Build Android x86 static
        run: |
          mkdir build-static-android-x86 && cd build-static-android-x86 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=x86 \
          -DBUILD_SHARED_LIBS=OFF .. && \
          cmake --build . -j8
      - run: cp -L build-static-android-x86/libleveldb.a libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-x86.a
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-x86.a
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-x86.a

      # Android x86_64 shared
      - name: Build Android x86_64 shared
        run: |
          mkdir build-shared-android-x86_64 && cd build-shared-android-x86_64 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=x86_64 \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-shared-android-x86_64/libleveldb.so libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-x86_64.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-x86_64.so
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-android-shared-x86_64.so

      # Android x86_64 static
      - name: Build Android x86_64 static
        run: |
          mkdir build-static-android-x86_64 && cd build-static-android-x86_64 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=x86_64 \
          -DBUILD_SHARED_LIBS=OFF .. && \
          cmake --build . -j8
      - run: cp -L build-static-android-x86_64/libleveldb.a libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-x86_64.a
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-x86_64.a
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-android-static-x86_64.a

  macos:
    name: Apple
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: 'google/leveldb'
          ref: ${{ github.event.inputs.leveldb-version }}
          submodules: true

      # macOS arm64 shared
      - name: macOs arm64 shared
        run: |
          mkdir build-macos-shared-arm64 && cd build-macos-shared-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-macos-shared-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-macos-shared-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-macos-shared-arm64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-macos-shared-arm64.dylib

      # macOS arm64 static
      - name: macOs arm64 static
        run: |
          mkdir build-macos-static-arm64 && cd build-macos-static-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=OFF .. && \
          cmake --build . -j8
      - run: cp -L build-macos-static-arm64/libleveldb.a libleveldb-${{ github.event.inputs.leveldb-version }}-macos-static-arm64.a
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-macos-static-arm64.a
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-macos-static-arm64.a

      # macOS x64 shared
      - name: macOs x64 shared
        run: |
          mkdir build-macos-shared-x64 && cd build-macos-shared-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON -DCMAKE_SYSTEM_NAME=Darwin .. && \
          cmake --build . -j8
      - run: cp -L build-macos-shared-x64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-macos-shared-x64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-macos-shared-x64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-macos-shared-x64.dylib

      # iOS arm64 shared
      - name: iOS arm64 shared
        run: |
          mkdir build-ios-shared-arm64 && cd build-ios-shared-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-ios-shared-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-ios-shared-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-ios-shared-arm64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-ios-shared-arm64.dylib

      # iOS simulator arm64 shared
      - name: iOS simulator arm64 shared
        run: |
          mkdir build-ios-simulator-shared-arm64 && cd build-ios-simulator-shared-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-ios-simulator-shared-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-ios-simulator-shared-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-ios-simulator-shared-arm64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-ios-simulator-shared-arm64.dylib

      # iOS simulator x64 shared
      - name: iOS simulator x64
        run: |
          mkdir build-ios-simulator-shared-x64 && cd build-ios-simulator-shared-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-ios-simulator-shared-x64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-ios-simulator-shared-x64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-ios-simulator-shared-x64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-ios-simulator-shared-x64.dylib

      # watchOS arm64 shared
      - name: watchOs arm64 shared
        run: |
          mkdir build-watchos-shared-arm64 && cd build-watchos-shared-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=watchOS -DCMAKE_OSX_SYSROOT=watchos \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-watchos-shared-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-watchos-shared-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-watchos-shared-arm64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-watchos-shared-arm64.dylib

      # watchOS simulator arm64 shared
      - name: watchOs simulator arm64 shared
        run: |
          mkdir build-watchos-simulator-shared-arm64 && cd build-watchos-simulator-shared-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=watchOS -DCMAKE_OSX_SYSROOT=watchsimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8\
      - run: cp -L build-watchos-simulator-shared-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-watchos-simulator-shared-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-watchos-simulator-shared-arm64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-watchos-simulator-shared-arm64.dylib

      # watchOS Simulator x64
      - name: watchOS simulator x64 shared
        run: |
          mkdir build-watchos-simulator-shared-x64 && cd build-watchos-simulator-shared-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_SYSTEM_NAME=watchOS -DCMAKE_OSX_SYSROOT=watchsimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-watchos-simulator-shared-x64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-watchos-simulator-shared-x64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-watchos-simulator-shared-x64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-watchos-simulator-shared-x64.dylib

      # tvOS arm64 shared
      - name: tvOs arm64
        run: |
          mkdir build-tvos-shared-arm64 && cd build-tvos-shared-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvos \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-tvos-shared-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-tvos-shared-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-tvos-shared-arm64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-tvos-shared-arm64.dylib

      # tvOS simulator arm64 shared
      - name: tvOs simulator arm64
        run: |
          mkdir build-tvos-simulator-shared-arm64 && cd build-tvos-simulator-shared-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvsimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-tvos-simulator-shared-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-tvos-simulator-shared-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-tvos-simulator-shared-arm64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-tvos-simulator-shared-arm64.dylib

      # tvOS simulator x64 shared
      - name: tvOS simulator x64
        run: |
          mkdir build-tvos-simulator-shared-x64 && cd build-tvos-simulator-shared-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvsimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-tvos-simulator-shared-x64/libleveldb.dylib libleveldb-${{ github.event.inputs.leveldb-version }}-tvos-simulator-shared-x64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.leveldb-version }}-tvos-simulator-shared-x64.dylib
          path: libleveldb-${{ github.event.inputs.leveldb-version }}-tvos-simulator-shared-x64.dylib

  publish-release-with-files:
    name: Create Publication
    needs:
      - windows
      - linux
      - macos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
      - name: Create all in one zip
        run: |
          output_zip="$(pwd)/libleveldb-${{ github.event.inputs.leveldb-version }}-all.zip"
          temp_dir=$(mktemp -d)
          find . -type f | while read -r file; do
              if [[ "$file" == *.zip ]]; then
                  unzip -d "$temp_dir/$(basename "$file" .zip)" "$file"
              else
                  cp "$file" "$temp_dir/"
              fi
          done
          (cd "$temp_dir" && zip -r $output_zip .)
          rm -rf "$temp_dir"
      - run: tree
        if: ${{ github.event.inputs.debug == 'true' }}
      - uses: softprops/action-gh-release@v2
        if: ${{ github.event.inputs.debug == 'false' }}
        with:
          files: |
            */*
            libleveldb-*.zip
          name: ${{ github.event.inputs.leveldb-version }}
          tag_name: ${{ github.event.inputs.leveldb-version }}
          draft: false
          prerelease: false
