name: Build LevelDB

on:
  workflow_dispatch:
    inputs:
      level-db-version:
        description: "LevelDB version"
        required: true

permissions:
  contents: write

jobs:
  windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: 'google/leveldb'
          ref: ${{ github.event.inputs.level-db-version }}
          submodules: true
      - name: Install dependencies with Chocolatey
        run: |
          choco install cmake --installargs '"ADD_CMAKE_TO_PATH=System"'
          choco install visualstudio2022buildtools --package-parameters "--allWorkloads"

      - name: Configure for Windows x64
        run: |
          mkdir build-x64 && cd build-x64
          cmake -G "Visual Studio 17 2022" -A x64 `
            -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF `
            -DBUILD_SHARED_LIBS=ON ..
      - name: Build LevelDB for Windows x64
        run: cmake --build build-x64 --config Release -j4
      - run: Compress-Archive -Path "build-x64/Release/*" -DestinationPath "libleveldb-${{ github.event.inputs.level-db-version }}-windows-x64.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-windows-x64.zip
          path: libleveldb-${{ github.event.inputs.level-db-version }}-windows-x64.zip

      - name: Configure for Windows ARM64
        run: |
          mkdir build-arm64 && cd build-arm64
          cmake -G "Visual Studio 17 2022" -A ARM64 `
            -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF `
            -DBUILD_SHARED_LIBS=ON ..
      - name: Build LevelDB for Windows ARM64
        run: cmake --build build-arm64 --config Release -j4
      - run: Compress-Archive -Path "build-arm64/Release/*" -DestinationPath "libleveldb-${{ github.event.inputs.level-db-version }}-windows-arm64.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-windows-arm64.zip
          path: libleveldb-${{ github.event.inputs.level-db-version }}-windows-arm64.zip

  linux:
    name: Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: 'google/leveldb'
          ref: ${{ github.event.inputs.level-db-version }}
          submodules: true
      - name: Build x64
        # using $(which cmake) otherwise it will error. ¯\_(ツ)_/¯
        run: |
          mkdir build-x64 && cd build-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF .. && \
          $(which cmake) --build . -j8
      - run: cp -L build-x64/libleveldb.so libleveldb-${{ github.event.inputs.level-db-version }}-linux-x64.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-linux-x64.so
          path: libleveldb-${{ github.event.inputs.level-db-version }}-linux-x64.so

      - name: Install arm64 cross-compilation tools
        run: sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Build arm64
        run: |
          mkdir build-arm64 && cd build-arm64 && \
          cmake -DCMAKE_SYSTEM_NAME=Linux -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
          -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
          -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-arm64/libleveldb.so libleveldb-${{ github.event.inputs.level-db-version }}-linux-arm64.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-linux-arm64.so
          path: libleveldb-${{ github.event.inputs.level-db-version }}-linux-arm64.so

      - name: Install armv7-a cross-compilation tools
        run: sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
      - name: Create toolchain file
        run: |
          cat <<EOF > armv7-a.cmake
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_VERSION 1)
          # Specify the cross compiler
          set(CMAKE_C_COMPILER arm-linux-gnueabihf-gcc)
          set(CMAKE_CXX_COMPILER arm-linux-gnueabihf-g++)
          set(CMAKE_LINKER arm-linux-gnueabihf-ld)
          set(CMAKE_STRIP arm-linux-gnueabihf-strip)
          # Where is the target environment
          set(CMAKE_FIND_ROOT_PATH /usr/arm-linux-gnueabihf)
          # Search for programs in the build host directories
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          # For libraries and headers in the target directories
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
      - name: Build armv7-a
        run: |
          mkdir build-armv7-a && cd build-armv7-a && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../armv7-a.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_CXX_STANDARD=11 \
          -DCMAKE_CXX_FLAGS="-std=c++11 -Wno-psabi" \
          -DCMAKE_C_FLAGS="-Wno-psabi" .. && \
          cmake --build . -j8
      - run: cp -L build-armv7-a/libleveldb.so libleveldb-${{ github.event.inputs.level-db-version }}-linux-armv7-a.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-linux-armv7-a.so
          path: libleveldb-${{ github.event.inputs.level-db-version }}-linux-armv7-a.so

      - name: Create Android toolchain file
        run: |
          cat <<EOF > android.cmake
          set(CMAKE_SYSTEM_NAME Android)
          set(CMAKE_ANDROID_NDK $($ANDROID_NDK))
          set(CMAKE_SYSTEM_VERSION 35)
          set(CMAKE_ANDROID_STL_TYPE c++_shared)
          EOF

      - name: Build Android ARM64
        run: |
          mkdir build-android-arm64 && cd build-android-arm64 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-android-arm64/libleveldb.so libleveldb-${{ github.event.inputs.level-db-version }}-android-arm64.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-android-arm64.so
          path: libleveldb-${{ github.event.inputs.level-db-version }}-android-arm64.so

      - name: Build Android ARMv7
        run: |
          mkdir build-android-armv7 && cd build-android-armv7 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=armeabi-v7a \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-android-armv7/libleveldb.so libleveldb-${{ github.event.inputs.level-db-version }}-android-armv7.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-android-armv7.so
          path: libleveldb-${{ github.event.inputs.level-db-version }}-android-armv7.so

      - name: Build Android x86
        run: |
          mkdir build-android-x86 && cd build-android-x86 && \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake -DCMAKE_BUILD_TYPE=Release \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=x86 \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-android-x86/libleveldb.so libleveldb-${{ github.event.inputs.level-db-version }}-android-x86.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-android-x86.so
          path: libleveldb-${{ github.event.inputs.level-db-version }}-android-x86.so

      - name: Build Android x86_64
        run: |
          mkdir build-android-x86_64 && cd build-android-x86_64 && -DCMAKE_BUILD_TYPE=Release \
          cmake -DCMAKE_TOOLCHAIN_FILE=../android.cmake \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DCMAKE_ANDROID_ARCH_ABI=x86_64 \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-android-x86_64/libleveldb.so libleveldb-${{ github.event.inputs.level-db-version }}-android-x86_64.so
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-android-x86_64.so
          path: libleveldb-${{ github.event.inputs.level-db-version }}-android-x86_64.so

  macos:
    name: Apple
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: 'google/leveldb'
          ref: ${{ github.event.inputs.level-db-version }}
          submodules: true

      - name: macOs arm64
        run: |
          mkdir build-macos-arm64 && cd build-macos-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-macos-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-macos-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-macos-arm64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-macos-arm64.dylib

      - name: macOs x64
        run: |
          mkdir build-macos-x64 && cd build-macos-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON -DCMAKE_SYSTEM_NAME=Darwin .. && \
          cmake --build . -j8
      - run: cp -L build-macos-x64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-macos-x64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-macos-x64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-macos-x64.dylib

      - name: iOS arm64
        run: |
          mkdir build-ios-arm64 && cd build-ios-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-macos-x64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-ios-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-ios-arm64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-ios-arm64.dylib

      - name: iOS simulator arm64
        run: |
          mkdir build-ios-simulator-arm64 && cd build-ios-simulator-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-ios-simulator-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-ios-simulator-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-ios-simulator-arm64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-ios-simulator-arm64.dylib

      - name: iOS simulator x64
        run: |
          mkdir build-ios-simulator-x64 && cd build-ios-simulator-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-ios-simulator-x64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-ios-simulator-x64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-ios-simulator-x64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-ios-simulator-x64.dylib

      - name: watchOs arm64
        run: |
          mkdir build-watchos-arm64 && cd build-watchos-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=watchOS -DCMAKE_OSX_SYSROOT=watchos \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-watchos-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-watchos-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-watchos-arm64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-watchos-arm64.dylib

      - name: watchOs simulator arm64
        run: |
          mkdir build-watchos-simulator-arm64 && cd build-watchos-simulator-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=watchOS -DCMAKE_OSX_SYSROOT=watchsimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8\
      - run: cp -L build-watchos-simulator-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-watchos-simulator-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-watchos-simulator-arm64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-watchos-simulator-arm64.dylib

      # watchOS Simulator x64
      - name: watchOS simulator x64
        run: |
          mkdir build-watchos-simulator-x64 && cd build-watchos-simulator-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_SYSTEM_NAME=watchOS -DCMAKE_OSX_SYSROOT=watchsimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-watchos-simulator-x64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-watchos-simulator-x64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-watchos-simulator-x64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-watchos-simulator-x64.dylib

      - name: tvOs arm64
        run: |
          mkdir build-tvos-arm64 && cd build-tvos-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvos \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-tvos-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-tvos-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-tvos-arm64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-tvos-arm64.dylib

      - name: tvOs simulator arm64
        run: |
          mkdir build-tvos-simulator-arm64 && cd build-tvos-simulator-arm64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvsimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-tvos-simulator-arm64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-tvos-simulator-arm64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-tvos-simulator-arm64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-tvos-simulator-arm64.dylib

      - name: tvOS simulator x64
        run: |
          mkdir build-tvos-simulator-x64 && cd build-tvos-simulator-x64 && \
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvsimulator \
          -DLEVELDB_BUILD_TESTS=OFF -DLEVELDB_BUILD_BENCHMARKS=OFF \
          -DBUILD_SHARED_LIBS=ON .. && \
          cmake --build . -j8
      - run: cp -L build-tvos-simulator-x64/libleveldb.dylib libleveldb-${{ github.event.inputs.level-db-version }}-tvos-simulator-x64.dylib
      - uses: actions/upload-artifact@v4
        with:
          name: libleveldb-${{ github.event.inputs.level-db-version }}-tvos-simulator-x64.dylib
          path: libleveldb-${{ github.event.inputs.level-db-version }}-tvos-simulator-x64.dylib


  publish-release-with-files:
    name: Create Publication
    needs:
      - windows
      - linux
      - macos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
      - name: Create all in one zip
        run: |
          output_zip="$(pwd)/libleveldb-${{ github.event.inputs.level-db-version }}-all.zip"
          temp_dir=$(mktemp -d)
          find . -type f | while read -r file; do
              if [[ "$file" == *.zip ]]; then
                  unzip -d "$temp_dir/$(basename "$file" .zip)" "$file"
              else
                  cp "$file" "$temp_dir/"
              fi
          done
          (cd "$temp_dir" && zip -r $output_zip .)
          rm -rf "$temp_dir"
      - run: tree
      - uses: softprops/action-gh-release@v2
        with:
          files: |
            */*
            libleveldb-1.23-all.zip
          name: ${{ github.event.inputs.level-db-version }}
          tag_name: ${{ github.event.inputs.level-db-version }}
          draft: false
          prerelease: false
